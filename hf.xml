<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.
int M;
int C;
int B;
int m;
int c;
int boardedM;
int boardedC;

const int d = 0;
const int upperLimit = 5;
int zeroPassangers;
int initialZP;
bool isSafe(int m, int c) {
    if (m == 0) {
        return true;
    }
    return m - c &gt;= d;
}

bool safeHere() {
    return isSafe(m, c);
}

bool safeThere() {
    return isSafe(M-m, C-c);
}

bool canFitZero(int m, int c) {
    return (0 &lt;= m + c) and (m + c &lt;= B);
}

bool canFitZeroThere(int m, int c) {
     return zeroPassangers != 0 and canFitZero(m, c) and (M - m) != 0 and (C - c) != 0;
}

bool canFit(int m, int c) {
    return (0 &lt; m + c) and (m + c &lt;= B);
}

bool validValue(int max, int value) {
    return (0 &lt;= value) and (value &lt;= max);
}

bool done() {
    return (m == 0) and (c == 0);
}</declaration>
		<location id="id0" x="-2295" y="-153">
			<name x="-2388" y="-161">Init</name>
		</location>
		<location id="id1" x="-663" y="-153">
			<name x="-638" y="-162">Success</name>
		</location>
		<location id="id2" x="-1309" y="-153">
			<name x="-1300" y="-187">Fail</name>
		</location>
		<location id="id3" x="-799" y="-153">
			<name x="-809" y="-187">Boat_there</name>
		</location>
		<location id="id4" x="-1819" y="-153">
			<name x="-1887" y="-187">Boat_here</name>
		</location>
		<location id="id5" x="-1309" y="-561">
			<name x="-1283" y="-569">H1</name>
		</location>
		<location id="id6" x="-1309" y="255">
			<name x="-1343" y="246">H2</name>
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="select" x="-2269" y="-476">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-2261" y="-416">canFitZeroThere(m1, c1) and 
validValue(m, m1) and 
validValue(c, c1)</label>
			<label kind="assignment" x="-2091" y="-365">m = m - m1,
c = c - c1,
boardedM = m1,
boardedC = c1,
zeroPassangers--</label>
			<nail x="-2159" y="-561"/>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="select" x="-663" y="-93">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-535" y="-51">canFitZero(m1, c1) and 
validValue(M - m, m1) and 
validValue(C - c, c1) and 
!done() and 
zeroPassangers != 0</label>
			<label kind="assignment" x="-408" y="51">m = m + m1,
c = c + c1,
boardedM = m1,
boardedC = c1,
zeroPassangers--</label>
			<nail x="-280" y="255"/>
		</transition>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-1793" y="42">safeHere() and safeThere()</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-1402" y="8">!safeHere() or !safeThere()</label>
		</transition>
		<transition id="id11">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-1402" y="-314">!safeHere() or !safeThere()</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-1071" y="-399">safeHere() and safeThere()</label>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-1232" y="-178">!isSafe(m, c) and !isSafe(M-m, C-c)</label>
		</transition>
		<transition id="id14">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-1733" y="-187">!isSafe(m, c) and !isSafe(M-m, C-c)</label>
		</transition>
		<transition id="id15">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-748" y="-144">done()</label>
		</transition>
		<transition id="id16">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="select" x="-1003" y="8">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-1071" y="68">canFit(m1, c1) and 
validValue(M - m, m1) and 
validValue(C - c, c1) and 
!done()</label>
			<label kind="assignment" x="-1164" y="144">m = m + m1,
c = c + c1,
boardedM = m1,
boardedC = c1</label>
		</transition>
		<transition id="id17">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="select" x="-1564" y="-544">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-1623" y="-501">canFit(m1, c1) and
validValue(m, m1) and 
validValue(c, c1)</label>
			<label kind="assignment" x="-1683" y="-433">m = m - m1,
c = c - c1,
boardedM = m1,
boardedC = c1</label>
		</transition>
		<transition id="id18">
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="select" x="-2252" y="-153">x: int[1, upperLimit],
y: int[1, upperLimit],
z: int[2, upperLimit],
w: int[0, upperLimit]</label>
			<label kind="guard" x="-2252" y="-68">x &gt;= y</label>
			<label kind="assignment" x="-2252" y="-42">M = x,
C = y,
B = z,

m = M,
c = C,
zeroPassangers = w,
initialZP = w</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>A[] deadlock imply (Process.Fail || Process.Success)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 13:51:26 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 13:54:38 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==3 &amp;&amp; Process.C==3 &amp;&amp; Process.B==2 &amp;&amp; Process.initialZP==0</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==3 &amp;&amp; Process.C==3 &amp;&amp; Process.B==2 &amp;&amp; Process.initialZP==1</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==4 &amp;&amp; Process.C==4 &amp;&amp; Process.B==2 &amp;&amp; Process.initialZP==0</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-05 14:45:44 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==4 &amp;&amp; Process.C==4 &amp;&amp; Process.B==3 &amp;&amp; Process.initialZP==0</formula>
			<comment/>
		</query>
	</queries>
</nta>
