<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.
int M;
int C;
int B;
int m;
int c;
int b;
int boardedM;
int boardedC;
const int d = 0;
const int upperLimit = 5;

bool isSafe(int m, int c) {
    if (m == 0) {
        return true;
    }
    return m - c &gt;= d;
}

bool safeHere() {
    return isSafe(m, c);
}

bool safeThere() {
    return isSafe(M-m, C-c);
}

bool canFit(int m, int c) {
    return (0 &lt; m + c) and (m + c &lt;= B);
}

bool stateCorrect(int m, int c) {
    return (m &gt;= 0) and (c &gt;= 0) and (M &gt;= m) and (C &gt;= c);
}


bool validValue(int max, int value) {
    return (0 &lt;= value) and (value &lt;= max);
}

bool done() {
    return (m == 0) and (c == 0);
}</declaration>
		<location id="id0" x="-1513" y="-119">
			<name x="-1606" y="-127">Init</name>
		</location>
		<location id="id1" x="187" y="-119">
			<name x="212" y="-128">Success</name>
		</location>
		<location id="id2" x="-561" y="-119">
			<name x="-552" y="-153">Fail</name>
		</location>
		<location id="id3" x="-51" y="-119">
			<name x="-61" y="-153">Boat_there</name>
		</location>
		<location id="id4" x="-1088" y="-119">
			<name x="-1156" y="-153">Boat_here</name>
		</location>
		<location id="id5" x="-561" y="-527">
		</location>
		<location id="id6" x="-561" y="289">
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-1070" y="51">safeHere() and safeThere()</label>
		</transition>
		<transition id="id8">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-561" y="51">!safeHere() or !safeThere()</label>
		</transition>
		<transition id="id9">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-552" y="-289">!safeHere() or !safeThere()</label>
		</transition>
		<transition id="id10">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-323" y="-365">safeHere() and safeThere()</label>
		</transition>
		<transition id="id11">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-484" y="-144">!isSafe(m, c) and !isSafe(M-m, C-c)</label>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-985" y="-153">!isSafe(m, c) and !isSafe(M-m, C-c)</label>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="59" y="-153">done()</label>
		</transition>
		<transition id="id14">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="select" x="-493" y="280">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-841" y="357">canFit(m1, c1) and validValue(M - m, m1) and validValue(C - c, c1) and !done()</label>
			<label kind="assignment" x="-969" y="374">m = m + m1,
c = c + c1,
boardedM = m1,
boardedC = c1</label>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="select" x="-833" y="-680">m1: int[0, upperLimit],
c1: int[0, upperLimit]</label>
			<label kind="guard" x="-1113" y="-612">canFit(m1, c1) and validValue(m, m1) and validValue(c, c1)</label>
			<label kind="assignment" x="-824" y="-569">m = m - m1,
c = c - c1,
boardedM = m1,
boardedC = c1</label>
		</transition>
		<transition id="id16">
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="select" x="-1419" y="-289">x: int[1, upperLimit],
y: int[1, upperLimit],
z: int[2, upperLimit]</label>
			<label kind="guard" x="-1394" y="-221">x &gt;= y</label>
			<label kind="assignment" x="-1394" y="-195">M = x,
C = y,
B = z,

m = M,
c = C,
b = B</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>A[] deadlock imply (Process.Fail || Process.Success)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-03 15:54:33 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-03 16:16:04 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==3 &amp;&amp; Process.C==3 &amp;&amp; Process.B==2</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-03 16:16:21 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==4 &amp;&amp; Process.C==4 &amp;&amp; Process.B==2</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-03 16:18:22 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Process.Success &amp;&amp; Process.M==4 &amp;&amp; Process.C==4 &amp;&amp; Process.B==3</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-03 16:19:05 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
	</queries>
</nta>
